{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "documentation \n",
    "https://www.dataquest.io/blog/python-datetime-tutorial/\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "now = datetime.now()\n",
    "#\n",
    "#t\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.datetime(2021, 1, 6, 9, 31, 37, 424193)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "now\n",
    "#\n",
    "#t\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as plticker\n",
    "import numpy as np\n",
    "\n",
    "import json\n",
    "import requests\n",
    "import pandas as pd\n",
    "import configparser\n",
    "\n",
    "from datetime import datetime\n",
    "from pprint import pprint\n",
    "config = configparser.ConfigParser()\n",
    "config.read('config.py')\n",
    "api_key = config['DEFAULT']['api_key'] # 'secret-key-of-myapp'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#build query url\n",
    "# Save config information\n",
    "url = \"http://api.openweathermap.org/data/2.5/weather?\"\n",
    "city = \"London\"\n",
    "\n",
    "# Build query URL\n",
    "query_url = url + \"appid=\" + api_key + \"&q=\" + city \n",
    "\n",
    "#\n",
    "#t\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_url = \"http://api.openweathermap.org/data/2.5/forecast?id=\" + \"5128581\" + \"&units=imperial\"+\"&appid=\" + api_key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_response = requests.get(query_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_json = weather_response.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['dt', 'main', 'weather', 'clouds', 'wind', 'visibility', 'pop', 'sys', 'dt_txt'])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_json['list'][0].keys()\n",
    "#\n",
    "#t\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import json\n",
    "#necessary to import depedencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.json_normalize(weather_json, 'list')\n",
    "#necessary to create dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>weather</th>\n",
       "      <th>visibility</th>\n",
       "      <th>pop</th>\n",
       "      <th>dt_txt</th>\n",
       "      <th>main.temp</th>\n",
       "      <th>main.feels_like</th>\n",
       "      <th>main.temp_min</th>\n",
       "      <th>main.temp_max</th>\n",
       "      <th>main.pressure</th>\n",
       "      <th>...</th>\n",
       "      <th>main.grnd_level</th>\n",
       "      <th>main.humidity</th>\n",
       "      <th>main.temp_kf</th>\n",
       "      <th>clouds.all</th>\n",
       "      <th>wind.speed</th>\n",
       "      <th>wind.deg</th>\n",
       "      <th>sys.pod</th>\n",
       "      <th>snow.3h</th>\n",
       "      <th>date</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1609956000</td>\n",
       "      <td>[{'id': 800, 'main': 'Clear', 'description': '...</td>\n",
       "      <td>10000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2021-01-06 18:00:00</td>\n",
       "      <td>39.90</td>\n",
       "      <td>29.34</td>\n",
       "      <td>39.88</td>\n",
       "      <td>39.90</td>\n",
       "      <td>1016</td>\n",
       "      <td>...</td>\n",
       "      <td>1015</td>\n",
       "      <td>61</td>\n",
       "      <td>0.01</td>\n",
       "      <td>10</td>\n",
       "      <td>11.34</td>\n",
       "      <td>318</td>\n",
       "      <td>d</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-01-06 18:00:00</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1609966800</td>\n",
       "      <td>[{'id': 800, 'main': 'Clear', 'description': '...</td>\n",
       "      <td>10000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2021-01-06 21:00:00</td>\n",
       "      <td>38.97</td>\n",
       "      <td>26.37</td>\n",
       "      <td>38.70</td>\n",
       "      <td>38.97</td>\n",
       "      <td>1016</td>\n",
       "      <td>...</td>\n",
       "      <td>1015</td>\n",
       "      <td>68</td>\n",
       "      <td>0.15</td>\n",
       "      <td>4</td>\n",
       "      <td>15.37</td>\n",
       "      <td>329</td>\n",
       "      <td>d</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-01-06 21:00:00</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1609977600</td>\n",
       "      <td>[{'id': 800, 'main': 'Clear', 'description': '...</td>\n",
       "      <td>10000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2021-01-07 00:00:00</td>\n",
       "      <td>36.68</td>\n",
       "      <td>25.03</td>\n",
       "      <td>36.46</td>\n",
       "      <td>36.68</td>\n",
       "      <td>1017</td>\n",
       "      <td>...</td>\n",
       "      <td>1017</td>\n",
       "      <td>77</td>\n",
       "      <td>0.12</td>\n",
       "      <td>1</td>\n",
       "      <td>13.87</td>\n",
       "      <td>329</td>\n",
       "      <td>n</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-01-07 00:00:00</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           dt                                            weather  visibility  \\\n",
       "0  1609956000  [{'id': 800, 'main': 'Clear', 'description': '...       10000   \n",
       "1  1609966800  [{'id': 800, 'main': 'Clear', 'description': '...       10000   \n",
       "2  1609977600  [{'id': 800, 'main': 'Clear', 'description': '...       10000   \n",
       "\n",
       "   pop               dt_txt  main.temp  main.feels_like  main.temp_min  \\\n",
       "0  0.0  2021-01-06 18:00:00      39.90            29.34          39.88   \n",
       "1  0.0  2021-01-06 21:00:00      38.97            26.37          38.70   \n",
       "2  0.0  2021-01-07 00:00:00      36.68            25.03          36.46   \n",
       "\n",
       "   main.temp_max  main.pressure  ...  main.grnd_level  main.humidity  \\\n",
       "0          39.90           1016  ...             1015             61   \n",
       "1          38.97           1016  ...             1015             68   \n",
       "2          36.68           1017  ...             1017             77   \n",
       "\n",
       "   main.temp_kf  clouds.all  wind.speed  wind.deg  sys.pod snow.3h  \\\n",
       "0          0.01          10       11.34       318        d     NaN   \n",
       "1          0.15           4       15.37       329        d     NaN   \n",
       "2          0.12           1       13.87       329        n     NaN   \n",
       "\n",
       "                 date day  \n",
       "0 2021-01-06 18:00:00   6  \n",
       "1 2021-01-06 21:00:00   6  \n",
       "2 2021-01-07 00:00:00   7  \n",
       "\n",
       "[3 rows x 21 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)\n",
    "#necessary to check out dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['date'] = pd.to_datetime(df[\"dt\"],unit='s')\n",
    "#necessary to create timestamps "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 40 entries, 0 to 39\n",
      "Data columns (total 21 columns):\n",
      " #   Column           Non-Null Count  Dtype         \n",
      "---  ------           --------------  -----         \n",
      " 0   dt               40 non-null     int64         \n",
      " 1   weather          40 non-null     object        \n",
      " 2   visibility       40 non-null     int64         \n",
      " 3   pop              40 non-null     float64       \n",
      " 4   dt_txt           40 non-null     object        \n",
      " 5   main.temp        40 non-null     float64       \n",
      " 6   main.feels_like  40 non-null     float64       \n",
      " 7   main.temp_min    40 non-null     float64       \n",
      " 8   main.temp_max    40 non-null     float64       \n",
      " 9   main.pressure    40 non-null     int64         \n",
      " 10  main.sea_level   40 non-null     int64         \n",
      " 11  main.grnd_level  40 non-null     int64         \n",
      " 12  main.humidity    40 non-null     int64         \n",
      " 13  main.temp_kf     40 non-null     float64       \n",
      " 14  clouds.all       40 non-null     int64         \n",
      " 15  wind.speed       40 non-null     float64       \n",
      " 16  wind.deg         40 non-null     int64         \n",
      " 17  sys.pod          40 non-null     object        \n",
      " 18  snow.3h          1 non-null      float64       \n",
      " 19  date             40 non-null     datetime64[ns]\n",
      " 20  day              40 non-null     int64         \n",
      "dtypes: datetime64[ns](1), float64(8), int64(9), object(3)\n",
      "memory usage: 6.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()\n",
    "#necessary to check the datatypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>weather</th>\n",
       "      <th>visibility</th>\n",
       "      <th>pop</th>\n",
       "      <th>dt_txt</th>\n",
       "      <th>main.temp</th>\n",
       "      <th>main.feels_like</th>\n",
       "      <th>main.temp_min</th>\n",
       "      <th>main.temp_max</th>\n",
       "      <th>main.pressure</th>\n",
       "      <th>...</th>\n",
       "      <th>main.grnd_level</th>\n",
       "      <th>main.humidity</th>\n",
       "      <th>main.temp_kf</th>\n",
       "      <th>clouds.all</th>\n",
       "      <th>wind.speed</th>\n",
       "      <th>wind.deg</th>\n",
       "      <th>sys.pod</th>\n",
       "      <th>snow.3h</th>\n",
       "      <th>date</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1609956000</td>\n",
       "      <td>[{'id': 800, 'main': 'Clear', 'description': '...</td>\n",
       "      <td>10000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2021-01-06 18:00:00</td>\n",
       "      <td>39.9</td>\n",
       "      <td>29.34</td>\n",
       "      <td>39.88</td>\n",
       "      <td>39.9</td>\n",
       "      <td>1016</td>\n",
       "      <td>...</td>\n",
       "      <td>1015</td>\n",
       "      <td>61</td>\n",
       "      <td>0.01</td>\n",
       "      <td>10</td>\n",
       "      <td>11.34</td>\n",
       "      <td>318</td>\n",
       "      <td>d</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-01-06 18:00:00</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           dt                                            weather  visibility  \\\n",
       "0  1609956000  [{'id': 800, 'main': 'Clear', 'description': '...       10000   \n",
       "\n",
       "   pop               dt_txt  main.temp  main.feels_like  main.temp_min  \\\n",
       "0  0.0  2021-01-06 18:00:00       39.9            29.34          39.88   \n",
       "\n",
       "   main.temp_max  main.pressure  ...  main.grnd_level  main.humidity  \\\n",
       "0           39.9           1016  ...             1015             61   \n",
       "\n",
       "   main.temp_kf  clouds.all  wind.speed  wind.deg  sys.pod snow.3h  \\\n",
       "0          0.01          10       11.34       318        d     NaN   \n",
       "\n",
       "                 date day  \n",
       "0 2021-01-06 18:00:00   6  \n",
       "\n",
       "[1 rows x 21 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'06'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['date'][0].strftime('%d')\n",
    "#\n",
    "# this is how to convert a timestamp into a string\n",
    "# in this case need it to be day\n",
    "#\n",
    "#t\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['day'] = 0\n",
    "#neccessary to add a column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-64-135fe6633ef3>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['day'][index] = df['date'][index].strftime('%d')\n"
     ]
    }
   ],
   "source": [
    "for index, row in df.iterrows():\n",
    "    df['day'][index] = df['date'][index].strftime('%d')\n",
    "#necessary to fill the column by the day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>weather</th>\n",
       "      <th>visibility</th>\n",
       "      <th>pop</th>\n",
       "      <th>dt_txt</th>\n",
       "      <th>main.temp</th>\n",
       "      <th>main.feels_like</th>\n",
       "      <th>main.temp_min</th>\n",
       "      <th>main.temp_max</th>\n",
       "      <th>main.pressure</th>\n",
       "      <th>...</th>\n",
       "      <th>main.grnd_level</th>\n",
       "      <th>main.humidity</th>\n",
       "      <th>main.temp_kf</th>\n",
       "      <th>clouds.all</th>\n",
       "      <th>wind.speed</th>\n",
       "      <th>wind.deg</th>\n",
       "      <th>sys.pod</th>\n",
       "      <th>snow.3h</th>\n",
       "      <th>date</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1609956000</td>\n",
       "      <td>[{'id': 800, 'main': 'Clear', 'description': '...</td>\n",
       "      <td>10000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2021-01-06 18:00:00</td>\n",
       "      <td>39.9</td>\n",
       "      <td>29.34</td>\n",
       "      <td>39.88</td>\n",
       "      <td>39.9</td>\n",
       "      <td>1016</td>\n",
       "      <td>...</td>\n",
       "      <td>1015</td>\n",
       "      <td>61</td>\n",
       "      <td>0.01</td>\n",
       "      <td>10</td>\n",
       "      <td>11.34</td>\n",
       "      <td>318</td>\n",
       "      <td>d</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-01-06 18:00:00</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           dt                                            weather  visibility  \\\n",
       "0  1609956000  [{'id': 800, 'main': 'Clear', 'description': '...       10000   \n",
       "\n",
       "   pop               dt_txt  main.temp  main.feels_like  main.temp_min  \\\n",
       "0  0.0  2021-01-06 18:00:00       39.9            29.34          39.88   \n",
       "\n",
       "   main.temp_max  main.pressure  ...  main.grnd_level  main.humidity  \\\n",
       "0           39.9           1016  ...             1015             61   \n",
       "\n",
       "   main.temp_kf  clouds.all  wind.speed  wind.deg  sys.pod snow.3h  \\\n",
       "0          0.01          10       11.34       318        d     NaN   \n",
       "\n",
       "                 date day  \n",
       "0 2021-01-06 18:00:00   6  \n",
       "\n",
       "[1 rows x 21 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 40 entries, 0 to 39\n",
      "Data columns (total 21 columns):\n",
      " #   Column           Non-Null Count  Dtype         \n",
      "---  ------           --------------  -----         \n",
      " 0   dt               40 non-null     int64         \n",
      " 1   weather          40 non-null     object        \n",
      " 2   visibility       40 non-null     int64         \n",
      " 3   pop              40 non-null     float64       \n",
      " 4   dt_txt           40 non-null     object        \n",
      " 5   main.temp        40 non-null     float64       \n",
      " 6   main.feels_like  40 non-null     float64       \n",
      " 7   main.temp_min    40 non-null     float64       \n",
      " 8   main.temp_max    40 non-null     float64       \n",
      " 9   main.pressure    40 non-null     int64         \n",
      " 10  main.sea_level   40 non-null     int64         \n",
      " 11  main.grnd_level  40 non-null     int64         \n",
      " 12  main.humidity    40 non-null     int64         \n",
      " 13  main.temp_kf     40 non-null     float64       \n",
      " 14  clouds.all       40 non-null     int64         \n",
      " 15  wind.speed       40 non-null     float64       \n",
      " 16  wind.deg         40 non-null     int64         \n",
      " 17  sys.pod          40 non-null     object        \n",
      " 18  snow.3h          1 non-null      float64       \n",
      " 19  date             40 non-null     datetime64[ns]\n",
      " 20  day              40 non-null     int64         \n",
      "dtypes: datetime64[ns](1), float64(8), int64(9), object(3)\n",
      "memory usage: 6.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()\n",
    "#necessary to check what column 'day' is returned as"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['description'] = \"0\"\n",
    "#necessary to create a new column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "#before filter, required to make a row with string\n",
    "for index, row in df.iterrows():\n",
    "    df['description'] = df['weather'][index][0]['description']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>weather</th>\n",
       "      <th>visibility</th>\n",
       "      <th>pop</th>\n",
       "      <th>dt_txt</th>\n",
       "      <th>main.temp</th>\n",
       "      <th>main.feels_like</th>\n",
       "      <th>main.temp_min</th>\n",
       "      <th>main.temp_max</th>\n",
       "      <th>main.pressure</th>\n",
       "      <th>...</th>\n",
       "      <th>main.humidity</th>\n",
       "      <th>main.temp_kf</th>\n",
       "      <th>clouds.all</th>\n",
       "      <th>wind.speed</th>\n",
       "      <th>wind.deg</th>\n",
       "      <th>sys.pod</th>\n",
       "      <th>snow.3h</th>\n",
       "      <th>date</th>\n",
       "      <th>day</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1609956000</td>\n",
       "      <td>[{'id': 800, 'main': 'Clear', 'description': '...</td>\n",
       "      <td>10000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2021-01-06 18:00:00</td>\n",
       "      <td>39.9</td>\n",
       "      <td>29.34</td>\n",
       "      <td>39.88</td>\n",
       "      <td>39.9</td>\n",
       "      <td>1016</td>\n",
       "      <td>...</td>\n",
       "      <td>61</td>\n",
       "      <td>0.01</td>\n",
       "      <td>10</td>\n",
       "      <td>11.34</td>\n",
       "      <td>318</td>\n",
       "      <td>d</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-01-06 18:00:00</td>\n",
       "      <td>6</td>\n",
       "      <td>clear sky</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           dt                                            weather  visibility  \\\n",
       "0  1609956000  [{'id': 800, 'main': 'Clear', 'description': '...       10000   \n",
       "\n",
       "   pop               dt_txt  main.temp  main.feels_like  main.temp_min  \\\n",
       "0  0.0  2021-01-06 18:00:00       39.9            29.34          39.88   \n",
       "\n",
       "   main.temp_max  main.pressure  ...  main.humidity  main.temp_kf  clouds.all  \\\n",
       "0           39.9           1016  ...             61          0.01          10   \n",
       "\n",
       "   wind.speed  wind.deg  sys.pod  snow.3h                date  day description  \n",
       "0       11.34       318        d      NaN 2021-01-06 18:00:00    6   clear sky  \n",
       "\n",
       "[1 rows x 22 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_of_descriptions = df['description'].tolist()\n",
    "#necessary to make a list to check for weather conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "some_list = ['abc-123', 'def-456', 'ghi-789']\n",
    "matching = [s for s in some_list if \"abc\" in s]\n",
    "matching2 = [s for s in some_list if \"def\" in s]\n",
    "#\n",
    "#t check for something in a list\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_for_snow_list = [s for s in list_of_descriptions if \"snow\" in s]\n",
    "check_for_rain_list = [s for s in list_of_descriptions if \"rain\" in s]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no snow possibility\n"
     ]
    }
   ],
   "source": [
    "if len(check_for_snow_list) > 0:\n",
    "    print('snow possibility')\n",
    "    snow_variable = 'Yes'\n",
    "else:\n",
    "    print('no snow possibility')\n",
    "    snow_variable = 'No'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no rain possibility\n"
     ]
    }
   ],
   "source": [
    "if len(check_for_rain_list) > 0:\n",
    "    print('rain possibility')\n",
    "    rain_variable = 'Yes'\n",
    "else:\n",
    "    print('no rain possibility')\n",
    "    rain_variable = 'No'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'No'"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rain_variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'No'"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "snow_variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "todays_day = int(now.strftime('%d'))\n",
    "tomorrows_day = todays_day + 1\n",
    "#necessary to get tomorrows day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "print(tomorrows_day)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "filtered_df = df.loc[df['day'] == tomorrows_day, :]\n",
    "#filter dataframe by day only\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>weather</th>\n",
       "      <th>visibility</th>\n",
       "      <th>pop</th>\n",
       "      <th>dt_txt</th>\n",
       "      <th>main.temp</th>\n",
       "      <th>main.feels_like</th>\n",
       "      <th>main.temp_min</th>\n",
       "      <th>main.temp_max</th>\n",
       "      <th>main.pressure</th>\n",
       "      <th>...</th>\n",
       "      <th>main.humidity</th>\n",
       "      <th>main.temp_kf</th>\n",
       "      <th>clouds.all</th>\n",
       "      <th>wind.speed</th>\n",
       "      <th>wind.deg</th>\n",
       "      <th>sys.pod</th>\n",
       "      <th>snow.3h</th>\n",
       "      <th>date</th>\n",
       "      <th>day</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1609977600</td>\n",
       "      <td>[{'id': 800, 'main': 'Clear', 'description': '...</td>\n",
       "      <td>10000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2021-01-07 00:00:00</td>\n",
       "      <td>36.68</td>\n",
       "      <td>25.03</td>\n",
       "      <td>36.46</td>\n",
       "      <td>36.68</td>\n",
       "      <td>1017</td>\n",
       "      <td>...</td>\n",
       "      <td>77</td>\n",
       "      <td>0.12</td>\n",
       "      <td>1</td>\n",
       "      <td>13.87</td>\n",
       "      <td>329</td>\n",
       "      <td>n</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td>7</td>\n",
       "      <td>clear sky</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           dt                                            weather  visibility  \\\n",
       "2  1609977600  [{'id': 800, 'main': 'Clear', 'description': '...       10000   \n",
       "\n",
       "   pop               dt_txt  main.temp  main.feels_like  main.temp_min  \\\n",
       "2  0.0  2021-01-07 00:00:00      36.68            25.03          36.46   \n",
       "\n",
       "   main.temp_max  main.pressure  ...  main.humidity  main.temp_kf  clouds.all  \\\n",
       "2          36.68           1017  ...             77          0.12           1   \n",
       "\n",
       "   wind.speed  wind.deg  sys.pod  snow.3h       date  day description  \n",
       "2       13.87       329        n      NaN 2021-01-07    7   clear sky  \n",
       "\n",
       "[1 rows x 22 columns]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_york_min_temp = round(filtered_df['main.temp'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_york_max_temp = round(filtered_df['main.temp'].min())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "tomorrows_date = filtered_df['date'].tolist()[0].strftime('%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'Series' object has no attribute 'strftime'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-135-dc4c757feeeb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfiltered_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrftime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'%Y-%m-%d'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5137\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5138\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5139\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5141\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'Series' object has no attribute 'strftime'"
     ]
    }
   ],
   "source": [
    "filtered_df['date'].strftime('%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Clear'"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df.iloc[0,1][0]['main']\n",
    "#\n",
    "#t\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'clear sky'"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_df.iloc[0,1][0]['description']\n",
    "#\n",
    "#t\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.datetime(2021, 1, 5, 20, 28, 55, 257744)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datetime.today()\n",
    "#\n",
    "#t\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "05\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "present = datetime.today().strftime('%d')\n",
    "print(present)\n",
    "#\n",
    "#t\n",
    "#\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# I am trying to plot below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_and_temp_df = df[['dt', 'main.temp']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-16-8355ec7a79cb>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  time_and_temp_df['new_time'] = pd.to_datetime(df[\"dt\"],unit='s').dt.tz_localize('utc').dt.tz_convert('America/New_York')\n"
     ]
    }
   ],
   "source": [
    "time_and_temp_df['new_time'] = pd.to_datetime(df[\"dt\"],unit='s').dt.tz_localize('utc').dt.tz_convert('America/New_York')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2021-01-06 13:00:00-0500', tz='America/New_York')"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_df['new_time'][6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>main.temp</th>\n",
       "      <th>new_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1609902000</td>\n",
       "      <td>38.57</td>\n",
       "      <td>2021-01-05 22:00:00-05:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           dt  main.temp                  new_time\n",
       "0  1609902000      38.57 2021-01-05 22:00:00-05:00"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1609891200"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_df['dt'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pytz in /opt/anaconda3/lib/python3.8/site-packages (2020.1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pytz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pytz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.datetime(2021, 1, 5, 22, 0, tzinfo=<DstTzInfo 'America/New_York' EST-1 day, 19:00:00 STD>)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datetime.fromtimestamp(time_and_temp_df['dt'][0], pytz.timezone('America/New_York'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['new_date'] = 0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-24-ac8495391e58>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['new_date'][index] = datetime.fromtimestamp(time_and_temp_df['dt'][index], pytz.timezone('America/New_York'))\n",
      "/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  iloc._setitem_with_indexer(indexer, value)\n"
     ]
    }
   ],
   "source": [
    "for index, row in df.iterrows():\n",
    "    df['new_date'][index] = datetime.fromtimestamp(time_and_temp_df['dt'][index], pytz.timezone('America/New_York'))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>weather</th>\n",
       "      <th>visibility</th>\n",
       "      <th>pop</th>\n",
       "      <th>dt_txt</th>\n",
       "      <th>main.temp</th>\n",
       "      <th>main.feels_like</th>\n",
       "      <th>main.temp_min</th>\n",
       "      <th>main.temp_max</th>\n",
       "      <th>main.pressure</th>\n",
       "      <th>main.sea_level</th>\n",
       "      <th>main.grnd_level</th>\n",
       "      <th>main.humidity</th>\n",
       "      <th>main.temp_kf</th>\n",
       "      <th>clouds.all</th>\n",
       "      <th>wind.speed</th>\n",
       "      <th>wind.deg</th>\n",
       "      <th>sys.pod</th>\n",
       "      <th>new_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1609902000</td>\n",
       "      <td>[{'id': 804, 'main': 'Clouds', 'description': ...</td>\n",
       "      <td>10000</td>\n",
       "      <td>0</td>\n",
       "      <td>2021-01-06 03:00:00</td>\n",
       "      <td>38.57</td>\n",
       "      <td>30.56</td>\n",
       "      <td>37.65</td>\n",
       "      <td>38.57</td>\n",
       "      <td>1014</td>\n",
       "      <td>1014</td>\n",
       "      <td>1013</td>\n",
       "      <td>73</td>\n",
       "      <td>0.51</td>\n",
       "      <td>92</td>\n",
       "      <td>7.54</td>\n",
       "      <td>354</td>\n",
       "      <td>n</td>\n",
       "      <td>2021-01-05 22:00:00-05:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           dt                                            weather  visibility  \\\n",
       "0  1609902000  [{'id': 804, 'main': 'Clouds', 'description': ...       10000   \n",
       "\n",
       "   pop               dt_txt  main.temp  main.feels_like  main.temp_min  \\\n",
       "0    0  2021-01-06 03:00:00      38.57            30.56          37.65   \n",
       "\n",
       "   main.temp_max  main.pressure  main.sea_level  main.grnd_level  \\\n",
       "0          38.57           1014            1014             1013   \n",
       "\n",
       "   main.humidity  main.temp_kf  clouds.all  wind.speed  wind.deg sys.pod  \\\n",
       "0             73          0.51          92        7.54       354       n   \n",
       "\n",
       "                    new_date  \n",
       "0  2021-01-05 22:00:00-05:00  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_and_temp_df = df[['new_date', 'main.temp']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_date</th>\n",
       "      <th>main.temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-01-05 22:00:00-05:00</td>\n",
       "      <td>38.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    new_date  main.temp\n",
       "0  2021-01-05 22:00:00-05:00      38.57"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lines = time_and_temp_df.plot.line(x='new_date', y='main.temp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-29-ae70a23f6348>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  time_and_temp_df[\"new_date\"] = pd.to_datetime(time_and_temp_df['new_date'])\n"
     ]
    }
   ],
   "source": [
    "time_and_temp_df[\"new_date\"] = pd.to_datetime(time_and_temp_df['new_date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 40 entries, 0 to 39\n",
      "Data columns (total 2 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   new_date   40 non-null     object \n",
      " 1   main.temp  40 non-null     float64\n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 768.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "time_and_temp_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_date</th>\n",
       "      <th>main.temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-01-05 22:00:00-05:00</td>\n",
       "      <td>38.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-01-06 01:00:00-05:00</td>\n",
       "      <td>36.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-01-06 04:00:00-05:00</td>\n",
       "      <td>34.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-01-06 07:00:00-05:00</td>\n",
       "      <td>33.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-01-06 10:00:00-05:00</td>\n",
       "      <td>34.05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    new_date  main.temp\n",
       "0  2021-01-05 22:00:00-05:00      38.57\n",
       "1  2021-01-06 01:00:00-05:00      36.81\n",
       "2  2021-01-06 04:00:00-05:00      34.59\n",
       "3  2021-01-06 07:00:00-05:00      33.84\n",
       "4  2021-01-06 10:00:00-05:00      34.05"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.resample('D', on='Date_Time').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "groupby = time_and_temp_df.set_index('new_date').groupby(pd.Grouper(freq='D')).max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>main.temp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>new_date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-01-05 00:00:00-05:00</th>\n",
       "      <td>38.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-06 00:00:00-05:00</th>\n",
       "      <td>39.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-07 00:00:00-05:00</th>\n",
       "      <td>42.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-08 00:00:00-05:00</th>\n",
       "      <td>40.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-09 00:00:00-05:00</th>\n",
       "      <td>36.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-10 00:00:00-05:00</th>\n",
       "      <td>35.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           main.temp\n",
       "new_date                            \n",
       "2021-01-05 00:00:00-05:00      38.57\n",
       "2021-01-06 00:00:00-05:00      39.33\n",
       "2021-01-07 00:00:00-05:00      42.10\n",
       "2021-01-08 00:00:00-05:00      40.19\n",
       "2021-01-09 00:00:00-05:00      36.90\n",
       "2021-01-10 00:00:00-05:00      35.40"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "groupby"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "date_list = groupby.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_list = groupby['main.temp']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2021-01-09 00:00:00-0500', tz='America/New_York', freq='D')"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list1[4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'plot_date'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-36-9d76be6d8e0a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m#     fig.autofmt_xdate()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m#     plt.show()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime_and_temp_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"new_date\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"main.temp\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlinewidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"o\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"red\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# formatter = DateFormatter('%m/%d/%y %H:%M')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5137\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5138\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5139\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5141\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'plot_date'"
     ]
    }
   ],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.dates import (YEARLY, DateFormatter,\n",
    "                              rrulewrapper, RRuleLocator, drange)\n",
    "import numpy as np\n",
    "import datetime\n",
    "\n",
    "# fig, ax = plt.subplots()\n",
    "#     ax.plot_date(times, temp, color='lightblue', linestyle='-', marker='')\n",
    "#     fig.autofmt_xdate()\n",
    "#     plt.show()\n",
    "ax = time_and_temp_df.plot_date(x=\"new_date\",y=\"main.temp\",linewidth=1, marker = \"o\", color=\"red\", grid=True, figsize=(20,5))\n",
    "\n",
    "# formatter = DateFormatter('%m/%d/%y %H:%M')\n",
    "# ax.xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%y %H:%M'))\n",
    "# plt.xlabel(\"Date\")\n",
    "# plt.ylabel(\"Temp\")\n",
    "# plt.title(\"New York Next 5 Days\", size=10)\n",
    "#ax.set_xticklabels(df.C, rotation=90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "x1 = time_and_temp_df['new_date']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "y2 = time_and_temp_df['main.temp']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sort a list python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "33.84"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import required module \n",
    "import matplotlib.pyplot as plt \n",
    "  \n",
    "# assign coordinates \n",
    "x = y = [i for i in range(0, 10)] \n",
    "ax = plt.axes() \n",
    "  \n",
    "# depict illustration \n",
    "plt.plot(x, y, color=\"lime\") \n",
    "  \n",
    "# setting ticks for x-axis \n",
    "ax.set_xticks([2, 4, 6, 8, 10]) \n",
    "  \n",
    "# setting label for x tick \n",
    "ax.set_xticklabels(['Geeks', 'for', 'geeks', '!']) \n",
    "  \n",
    "# setting ticks for y-axis \n",
    "ax.set_yticks([1, 3, 5, 7, 9]) \n",
    "  \n",
    "# setting label for y tick \n",
    "ax.set_yticklabels(['A', 'B', 'C', 'D']) \n",
    "  \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-89-56491d8883b3>:15: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_xticklabels(date_list, rotation='vertical')\n",
      "<ipython-input-89-56491d8883b3>:17: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels(temp_list)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "x = x1\n",
    "y = y2\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.set_title('Example Graph')\n",
    "\n",
    "ax.set_ylabel('y-AXIS')\n",
    "ax.set_xlabel('x-AXIS')\n",
    "\n",
    "ax.plot(x, y)\n",
    "\n",
    "\n",
    "ax.set_xticklabels(date_list, rotation='vertical')\n",
    "\n",
    "ax.set_yticklabels(temp_list)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "# x = [1, 2, 3, 4]\n",
    "# y = [1, 4, 9, 6]\n",
    "# labels = ['Frogs', 'Hogs', 'Bogs', 'Slogs']\n",
    "\n",
    "# plt.plot(x, y)\n",
    "# # You can specify a rotation for the tick labels in degrees or with keywords.\n",
    "# plt.xticks(x, labels, rotation='vertical')\n",
    "# # Pad margins so that markers don't get clipped by the axes\n",
    "# plt.margins(0.2)\n",
    "# # Tweak spacing to prevent clipping of tick-labels\n",
    "# plt.subplots_adjust(bottom=0.15)\n",
    "# plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://stackoverflow.com/questions/25538520/change-tick-frequency-on-x-time-not-number-frequency-in-matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing matplotlib module \n",
    "import matplotlib.pyplot as plt \n",
    "import numpy as np \n",
    "  \n",
    "# x-axis & y-axis values \n",
    "x = [3, 2, 7, 4, 9] \n",
    "y = [10, 4, 7, 1, 2] \n",
    "  \n",
    "# create a figure and axes \n",
    "fig, ax = plt.subplots() \n",
    "  \n",
    "# setting title to graph \n",
    "ax.set_title('Example Graph') \n",
    "  \n",
    "# label x-axis and y-axis \n",
    "ax.set_ylabel('y-AXIS') \n",
    "ax.set_xlabel('x-AXIS') \n",
    "  \n",
    "# function to plot and show graph \n",
    "ax.plot(x, y) \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.dates import DayLocator, HourLocator, DateFormatter, drange\n",
    "import numpy as np\n",
    "\n",
    "date1 = datetime.datetime(2000, 3, 2)\n",
    "date2 = datetime.datetime(2000, 3, 6)\n",
    "delta = datetime.timedelta(hours=6)\n",
    "dates = drange(date1, date2, delta)\n",
    "\n",
    "y = np.arange(len(dates))\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot_date(dates, y ** 2)\n",
    "\n",
    "# this is superfluous, since the autoscaler should get it right, but\n",
    "# use date2num and num2date to convert between dates and floats if\n",
    "# you want; both date2num and num2date convert an instance or sequence\n",
    "ax.set_xlim(dates[0], dates[-1])\n",
    "\n",
    "# The hour locator takes the hour or sequence of hours you want to\n",
    "# tick, not the base multiple\n",
    "\n",
    "ax.xaxis.set_major_locator(DayLocator())\n",
    "ax.xaxis.set_minor_locator(HourLocator(range(0, 25, 6)))\n",
    "ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))\n",
    "\n",
    "ax.fmt_xdata = DateFormatter('%Y-%m-%d %H:%M:%S')\n",
    "fig.autofmt_xdate()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.dates import (YEARLY, DateFormatter,\n",
    "                              rrulewrapper, RRuleLocator, drange)\n",
    "import numpy as np\n",
    "import datetime\n",
    "\n",
    "# Fixing random state for reproducibility\n",
    "np.random.seed(19680801)\n",
    "\n",
    "\n",
    "# tick every 5th easter\n",
    "rule = rrulewrapper(YEARLY, byeaster=1, interval=5)\n",
    "loc = RRuleLocator(rule)\n",
    "formatter = DateFormatter('%m/%d/%y %H:%M')\n",
    "date1 = datetime.date(1952, 1, 1)\n",
    "date2 = datetime.date(2004, 4, 12)\n",
    "delta = datetime.timedelta(days=100)\n",
    "\n",
    "dates = drange(date1, date2, delta)\n",
    "s = np.random.rand(len(dates))  # make up some random y values\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "plt.plot_date(dates, s)\n",
    "ax.xaxis.set_major_locator(loc)\n",
    "ax.xaxis.set_major_formatter(formatter)\n",
    "ax.xaxis.set_tick_params(rotation=30, labelsize=10)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>dt</th>\n",
       "      <th>main.temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-01-06 00:00:00</td>\n",
       "      <td>1609891200</td>\n",
       "      <td>39.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-01-06 03:00:00</td>\n",
       "      <td>1609902000</td>\n",
       "      <td>38.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-01-06 06:00:00</td>\n",
       "      <td>1609912800</td>\n",
       "      <td>35.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-01-06 09:00:00</td>\n",
       "      <td>1609923600</td>\n",
       "      <td>34.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-01-06 12:00:00</td>\n",
       "      <td>1609934400</td>\n",
       "      <td>34.12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 date          dt  main.temp\n",
       "0 2021-01-06 00:00:00  1609891200      39.81\n",
       "1 2021-01-06 03:00:00  1609902000      38.12\n",
       "2 2021-01-06 06:00:00  1609912800      35.98\n",
       "3 2021-01-06 09:00:00  1609923600      34.32\n",
       "4 2021-01-06 12:00:00  1609934400      34.12"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_df.head() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>main.temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>41.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-01-05 03:00:00</td>\n",
       "      <td>39.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-01-05 06:00:00</td>\n",
       "      <td>38.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-01-05 09:00:00</td>\n",
       "      <td>36.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-01-05 12:00:00</td>\n",
       "      <td>36.90</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 date  main.temp\n",
       "0 2021-01-05 00:00:00      41.18\n",
       "1 2021-01-05 03:00:00      39.54\n",
       "2 2021-01-05 06:00:00      38.05\n",
       "3 2021-01-05 09:00:00      36.82\n",
       "4 2021-01-05 12:00:00      36.90"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'coord': {'lon': -122.42, 'lat': 37.77},\n",
       " 'weather': [{'id': 804,\n",
       "   'main': 'Clouds',\n",
       "   'description': 'overcast clouds',\n",
       "   'icon': '04d'}],\n",
       " 'base': 'stations',\n",
       " 'main': {'temp': 286.34,\n",
       "  'feels_like': 285.68,\n",
       "  'temp_min': 284.82,\n",
       "  'temp_max': 287.59,\n",
       "  'pressure': 1016,\n",
       "  'humidity': 92},\n",
       " 'visibility': 10000,\n",
       " 'wind': {'speed': 1.79, 'deg': 204, 'gust': 5.81},\n",
       " 'clouds': {'all': 100},\n",
       " 'dt': 1609792434,\n",
       " 'sys': {'type': 3,\n",
       "  'id': 2017837,\n",
       "  'country': 'US',\n",
       "  'sunrise': 1609773921,\n",
       "  'sunset': 1609808636},\n",
       " 'timezone': -28800,\n",
       " 'id': 5391959,\n",
       " 'name': 'San Francisco',\n",
       " 'cod': 200}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cities = [\"New York\", \"San Francisco\"]\n",
    "cities_df = pd.DataFrame(cities)\n",
    "\n",
    "cities_test = []\n",
    "for index, row in cities_df.iterrows():\n",
    "    query_url = url + \"appid=\" + api_key + \"&q=\" + str(row[0])\n",
    "    weather_response = requests.get(query_url)\n",
    "    weather_json = weather_response.json()\n",
    "    cities_test.append(row[0])\n",
    "weather_json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.datetime(2020, 9, 30, 13, 56, 3, 961447)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d1 = datetime.now()\n",
    "d1\n",
    "d2 = d1.utcnow()\n",
    "d2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://stackoverflow.com/questions/3682748/converting-unix-timestamp-string-to-readable-date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dt_object: 2020-09-29 21:24:55\n",
      "type(dt_object):  <class 'datetime.datetime'>\n"
     ]
    }
   ],
   "source": [
    "dt_object = datetime.fromtimestamp(dt)\n",
    "print(\"dt_object:\", dt_object)\n",
    "print(\"type(dt_object): \", type(dt_object))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "http://history.openweathermap.org/data/2.5/history/city?q=San f&appid={API key}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "so I want to make a call in a different way I can do it with a for loop\n",
    "I want to get 5 days of data from the unix time right now\n",
    "\n",
    "I need two for loops\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1601424000, 1601427600, 1601431200, 1601434800, 1601438400]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I want to be able to create a range so that I can go to four\n",
    "the problem is calling all the different variables\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "\n",
    "\n",
    "# Opening JSON file and loading the data \n",
    "# into the variable data \n",
    "with open('data.json') as json_file: \n",
    "    data = json.load(json_file) \n",
    "  \n",
    "    \n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes it's easier to do all the appending outside of pandas, then, just create the DataFrame in one shot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "because we have returned the hourly thing, now we can do something here. \n",
    "set the variables\n",
    "then you need to iterate over the frame\n",
    "and put them respectity\n",
    "I only care about the time and the temp anyways"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_and_temp_past_5_days = pd.DataFrame({\n",
    "    'Time': main_time_list,\n",
    "    'Temp': main_temp_list\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1601510400</td>\n",
       "      <td>72.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1601514000</td>\n",
       "      <td>80.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1601517600</td>\n",
       "      <td>67.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1601521200</td>\n",
       "      <td>66.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1601524800</td>\n",
       "      <td>65.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Time   Temp\n",
       "0  1601510400  72.16\n",
       "1  1601514000  80.01\n",
       "2  1601517600  67.37\n",
       "3  1601521200  66.15\n",
       "4  1601524800  65.95"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_past_5_days.head()\n",
    "#only printing the head, I was confused here.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1601510400.0\n",
      "1601514000.0\n",
      "1601517600.0\n",
      "1601521200.0\n",
      "1601524800.0\n",
      "1601528400.0\n",
      "1601532000.0\n",
      "1601535600.0\n",
      "1601539200.0\n",
      "1601542800.0\n",
      "1601546400.0\n",
      "1601550000.0\n",
      "1601553600.0\n",
      "1601557200.0\n",
      "1601560800.0\n",
      "1601564400.0\n",
      "1601568000.0\n",
      "1601571600.0\n",
      "1601575200.0\n",
      "1601578800.0\n",
      "1601582400.0\n",
      "1601586000.0\n",
      "1601589600.0\n",
      "1601593200.0\n",
      "1601424000.0\n",
      "1601427600.0\n",
      "1601431200.0\n",
      "1601434800.0\n",
      "1601438400.0\n",
      "1601442000.0\n",
      "1601445600.0\n",
      "1601449200.0\n",
      "1601452800.0\n",
      "1601456400.0\n",
      "1601460000.0\n",
      "1601463600.0\n",
      "1601467200.0\n",
      "1601470800.0\n",
      "1601474400.0\n",
      "1601478000.0\n",
      "1601481600.0\n",
      "1601485200.0\n",
      "1601488800.0\n",
      "1601492400.0\n",
      "1601496000.0\n",
      "1601499600.0\n",
      "1601503200.0\n",
      "1601506800.0\n",
      "1601337600.0\n",
      "1601341200.0\n",
      "1601344800.0\n",
      "1601348400.0\n",
      "1601352000.0\n",
      "1601355600.0\n",
      "1601359200.0\n",
      "1601362800.0\n",
      "1601366400.0\n",
      "1601370000.0\n",
      "1601373600.0\n",
      "1601377200.0\n",
      "1601380800.0\n",
      "1601384400.0\n",
      "1601388000.0\n",
      "1601391600.0\n",
      "1601395200.0\n",
      "1601398800.0\n",
      "1601402400.0\n",
      "1601406000.0\n",
      "1601409600.0\n",
      "1601413200.0\n",
      "1601416800.0\n",
      "1601420400.0\n",
      "1601251200.0\n",
      "1601254800.0\n",
      "1601258400.0\n",
      "1601262000.0\n",
      "1601265600.0\n",
      "1601269200.0\n",
      "1601272800.0\n",
      "1601276400.0\n",
      "1601280000.0\n",
      "1601283600.0\n",
      "1601287200.0\n",
      "1601290800.0\n",
      "1601294400.0\n",
      "1601298000.0\n",
      "1601301600.0\n",
      "1601305200.0\n",
      "1601308800.0\n",
      "1601312400.0\n",
      "1601316000.0\n",
      "1601319600.0\n",
      "1601323200.0\n",
      "1601326800.0\n",
      "1601330400.0\n",
      "1601334000.0\n",
      "1601164800.0\n",
      "1601168400.0\n",
      "1601172000.0\n",
      "1601175600.0\n",
      "1601179200.0\n",
      "1601182800.0\n",
      "1601186400.0\n",
      "1601190000.0\n",
      "1601193600.0\n",
      "1601197200.0\n",
      "1601200800.0\n",
      "1601204400.0\n",
      "1601208000.0\n",
      "1601211600.0\n",
      "1601215200.0\n",
      "1601218800.0\n",
      "1601222400.0\n",
      "1601226000.0\n",
      "1601229600.0\n",
      "1601233200.0\n",
      "1601236800.0\n",
      "1601240400.0\n",
      "1601244000.0\n",
      "1601247600.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[datetime.datetime(2020, 9, 30, 17, 0),\n",
       " datetime.datetime(2020, 9, 30, 18, 0),\n",
       " datetime.datetime(2020, 9, 30, 19, 0),\n",
       " datetime.datetime(2020, 9, 30, 20, 0),\n",
       " datetime.datetime(2020, 9, 30, 21, 0),\n",
       " datetime.datetime(2020, 9, 30, 22, 0),\n",
       " datetime.datetime(2020, 9, 30, 23, 0),\n",
       " datetime.datetime(2020, 10, 1, 0, 0),\n",
       " datetime.datetime(2020, 10, 1, 1, 0),\n",
       " datetime.datetime(2020, 10, 1, 2, 0),\n",
       " datetime.datetime(2020, 10, 1, 3, 0),\n",
       " datetime.datetime(2020, 10, 1, 4, 0),\n",
       " datetime.datetime(2020, 10, 1, 5, 0),\n",
       " datetime.datetime(2020, 10, 1, 6, 0),\n",
       " datetime.datetime(2020, 10, 1, 7, 0),\n",
       " datetime.datetime(2020, 10, 1, 8, 0),\n",
       " datetime.datetime(2020, 10, 1, 9, 0),\n",
       " datetime.datetime(2020, 10, 1, 10, 0),\n",
       " datetime.datetime(2020, 10, 1, 11, 0),\n",
       " datetime.datetime(2020, 10, 1, 12, 0),\n",
       " datetime.datetime(2020, 10, 1, 13, 0),\n",
       " datetime.datetime(2020, 10, 1, 14, 0),\n",
       " datetime.datetime(2020, 10, 1, 15, 0),\n",
       " datetime.datetime(2020, 10, 1, 16, 0),\n",
       " datetime.datetime(2020, 9, 29, 17, 0),\n",
       " datetime.datetime(2020, 9, 29, 18, 0),\n",
       " datetime.datetime(2020, 9, 29, 19, 0),\n",
       " datetime.datetime(2020, 9, 29, 20, 0),\n",
       " datetime.datetime(2020, 9, 29, 21, 0),\n",
       " datetime.datetime(2020, 9, 29, 22, 0),\n",
       " datetime.datetime(2020, 9, 29, 23, 0),\n",
       " datetime.datetime(2020, 9, 30, 0, 0),\n",
       " datetime.datetime(2020, 9, 30, 1, 0),\n",
       " datetime.datetime(2020, 9, 30, 2, 0),\n",
       " datetime.datetime(2020, 9, 30, 3, 0),\n",
       " datetime.datetime(2020, 9, 30, 4, 0),\n",
       " datetime.datetime(2020, 9, 30, 5, 0),\n",
       " datetime.datetime(2020, 9, 30, 6, 0),\n",
       " datetime.datetime(2020, 9, 30, 7, 0),\n",
       " datetime.datetime(2020, 9, 30, 8, 0),\n",
       " datetime.datetime(2020, 9, 30, 9, 0),\n",
       " datetime.datetime(2020, 9, 30, 10, 0),\n",
       " datetime.datetime(2020, 9, 30, 11, 0),\n",
       " datetime.datetime(2020, 9, 30, 12, 0),\n",
       " datetime.datetime(2020, 9, 30, 13, 0),\n",
       " datetime.datetime(2020, 9, 30, 14, 0),\n",
       " datetime.datetime(2020, 9, 30, 15, 0),\n",
       " datetime.datetime(2020, 9, 30, 16, 0),\n",
       " datetime.datetime(2020, 9, 28, 17, 0),\n",
       " datetime.datetime(2020, 9, 28, 18, 0),\n",
       " datetime.datetime(2020, 9, 28, 19, 0),\n",
       " datetime.datetime(2020, 9, 28, 20, 0),\n",
       " datetime.datetime(2020, 9, 28, 21, 0),\n",
       " datetime.datetime(2020, 9, 28, 22, 0),\n",
       " datetime.datetime(2020, 9, 28, 23, 0),\n",
       " datetime.datetime(2020, 9, 29, 0, 0),\n",
       " datetime.datetime(2020, 9, 29, 1, 0),\n",
       " datetime.datetime(2020, 9, 29, 2, 0),\n",
       " datetime.datetime(2020, 9, 29, 3, 0),\n",
       " datetime.datetime(2020, 9, 29, 4, 0),\n",
       " datetime.datetime(2020, 9, 29, 5, 0),\n",
       " datetime.datetime(2020, 9, 29, 6, 0),\n",
       " datetime.datetime(2020, 9, 29, 7, 0),\n",
       " datetime.datetime(2020, 9, 29, 8, 0),\n",
       " datetime.datetime(2020, 9, 29, 9, 0),\n",
       " datetime.datetime(2020, 9, 29, 10, 0),\n",
       " datetime.datetime(2020, 9, 29, 11, 0),\n",
       " datetime.datetime(2020, 9, 29, 12, 0),\n",
       " datetime.datetime(2020, 9, 29, 13, 0),\n",
       " datetime.datetime(2020, 9, 29, 14, 0),\n",
       " datetime.datetime(2020, 9, 29, 15, 0),\n",
       " datetime.datetime(2020, 9, 29, 16, 0),\n",
       " datetime.datetime(2020, 9, 27, 17, 0),\n",
       " datetime.datetime(2020, 9, 27, 18, 0),\n",
       " datetime.datetime(2020, 9, 27, 19, 0),\n",
       " datetime.datetime(2020, 9, 27, 20, 0),\n",
       " datetime.datetime(2020, 9, 27, 21, 0),\n",
       " datetime.datetime(2020, 9, 27, 22, 0),\n",
       " datetime.datetime(2020, 9, 27, 23, 0),\n",
       " datetime.datetime(2020, 9, 28, 0, 0),\n",
       " datetime.datetime(2020, 9, 28, 1, 0),\n",
       " datetime.datetime(2020, 9, 28, 2, 0),\n",
       " datetime.datetime(2020, 9, 28, 3, 0),\n",
       " datetime.datetime(2020, 9, 28, 4, 0),\n",
       " datetime.datetime(2020, 9, 28, 5, 0),\n",
       " datetime.datetime(2020, 9, 28, 6, 0),\n",
       " datetime.datetime(2020, 9, 28, 7, 0),\n",
       " datetime.datetime(2020, 9, 28, 8, 0),\n",
       " datetime.datetime(2020, 9, 28, 9, 0),\n",
       " datetime.datetime(2020, 9, 28, 10, 0),\n",
       " datetime.datetime(2020, 9, 28, 11, 0),\n",
       " datetime.datetime(2020, 9, 28, 12, 0),\n",
       " datetime.datetime(2020, 9, 28, 13, 0),\n",
       " datetime.datetime(2020, 9, 28, 14, 0),\n",
       " datetime.datetime(2020, 9, 28, 15, 0),\n",
       " datetime.datetime(2020, 9, 28, 16, 0),\n",
       " datetime.datetime(2020, 9, 26, 17, 0),\n",
       " datetime.datetime(2020, 9, 26, 18, 0),\n",
       " datetime.datetime(2020, 9, 26, 19, 0),\n",
       " datetime.datetime(2020, 9, 26, 20, 0),\n",
       " datetime.datetime(2020, 9, 26, 21, 0),\n",
       " datetime.datetime(2020, 9, 26, 22, 0),\n",
       " datetime.datetime(2020, 9, 26, 23, 0),\n",
       " datetime.datetime(2020, 9, 27, 0, 0),\n",
       " datetime.datetime(2020, 9, 27, 1, 0),\n",
       " datetime.datetime(2020, 9, 27, 2, 0),\n",
       " datetime.datetime(2020, 9, 27, 3, 0),\n",
       " datetime.datetime(2020, 9, 27, 4, 0),\n",
       " datetime.datetime(2020, 9, 27, 5, 0),\n",
       " datetime.datetime(2020, 9, 27, 6, 0),\n",
       " datetime.datetime(2020, 9, 27, 7, 0),\n",
       " datetime.datetime(2020, 9, 27, 8, 0),\n",
       " datetime.datetime(2020, 9, 27, 9, 0),\n",
       " datetime.datetime(2020, 9, 27, 10, 0),\n",
       " datetime.datetime(2020, 9, 27, 11, 0),\n",
       " datetime.datetime(2020, 9, 27, 12, 0),\n",
       " datetime.datetime(2020, 9, 27, 13, 0),\n",
       " datetime.datetime(2020, 9, 27, 14, 0),\n",
       " datetime.datetime(2020, 9, 27, 15, 0),\n",
       " datetime.datetime(2020, 9, 27, 16, 0)]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pacific_time_list = []\n",
    "for index, row in time_and_temp_past_5_days.iterrows():\n",
    "    print(row[0])\n",
    "    a = datetime.fromtimestamp(row[0])\n",
    "    pacific_time_list.append(a)\n",
    "pacific_time_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>Temp</th>\n",
       "      <th>Pacific Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1601510400</td>\n",
       "      <td>72.16</td>\n",
       "      <td>2020-09-30 17:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1601514000</td>\n",
       "      <td>80.01</td>\n",
       "      <td>2020-09-30 18:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1601517600</td>\n",
       "      <td>67.37</td>\n",
       "      <td>2020-09-30 19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1601521200</td>\n",
       "      <td>66.15</td>\n",
       "      <td>2020-09-30 20:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1601524800</td>\n",
       "      <td>65.95</td>\n",
       "      <td>2020-09-30 21:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>1601233200</td>\n",
       "      <td>74.46</td>\n",
       "      <td>2020-09-27 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>1601236800</td>\n",
       "      <td>76.80</td>\n",
       "      <td>2020-09-27 13:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>1601240400</td>\n",
       "      <td>78.85</td>\n",
       "      <td>2020-09-27 14:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>1601244000</td>\n",
       "      <td>79.83</td>\n",
       "      <td>2020-09-27 15:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>1601247600</td>\n",
       "      <td>77.79</td>\n",
       "      <td>2020-09-27 16:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Time   Temp        Pacific Time\n",
       "0    1601510400  72.16 2020-09-30 17:00:00\n",
       "1    1601514000  80.01 2020-09-30 18:00:00\n",
       "2    1601517600  67.37 2020-09-30 19:00:00\n",
       "3    1601521200  66.15 2020-09-30 20:00:00\n",
       "4    1601524800  65.95 2020-09-30 21:00:00\n",
       "..          ...    ...                 ...\n",
       "115  1601233200  74.46 2020-09-27 12:00:00\n",
       "116  1601236800  76.80 2020-09-27 13:00:00\n",
       "117  1601240400  78.85 2020-09-27 14:00:00\n",
       "118  1601244000  79.83 2020-09-27 15:00:00\n",
       "119  1601247600  77.79 2020-09-27 16:00:00\n",
       "\n",
       "[120 rows x 3 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_past_5_days['Pacific Time'] = pacific_time_list\n",
    "time_and_temp_past_5_days\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "del time_and_temp_past_5_days[\"Time\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_and_temp_past_5_days = time_and_temp_past_5_days.sort_values(by=['Pacific Time'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_and_temp_past_5_days = time_and_temp_past_5_days[[\"Pacific Time\",\"Temp\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_and_temp_past_5_days = time_and_temp_past_5_days.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pacific Time</th>\n",
       "      <th>Temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-01 16:00:00</td>\n",
       "      <td>80.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-01 15:00:00</td>\n",
       "      <td>82.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-01 14:00:00</td>\n",
       "      <td>80.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-01 13:00:00</td>\n",
       "      <td>79.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-01 12:00:00</td>\n",
       "      <td>82.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Pacific Time   Temp\n",
       "0 2020-10-01 16:00:00  80.01\n",
       "1 2020-10-01 15:00:00  82.54\n",
       "2 2020-10-01 14:00:00  80.82\n",
       "3 2020-10-01 13:00:00  79.54\n",
       "4 2020-10-01 12:00:00  82.00"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_and_temp_past_5_days.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "136\n",
    "\n",
    "Sometimes it's easier to do all the appending outside of pandas, then, just create the DataFrame in one shot.\n",
    "\n",
    "https://stackoverflow.com/questions/26309962/appending-a-list-or-series-to-a-pandas-dataframe-as-a-row\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dt.hour\n",
    "why use this?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_16_df = time_and_temp_past_5_days.loc[time_and_temp_past_5_days[\"By Hour\"] == 16,:]\n",
    "time_12_df = time_and_temp_past_5_days.loc[time_and_temp_past_5_days[\"By Hour\"] == 12,:]\n",
    "time_9_df = time_and_temp_past_5_days.loc[time_and_temp_past_5_days[\"By Hour\"] == 9,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_dfs = [time_9_df, time_12_df, time_16_df]\n",
    "for df in all_dfs:\n",
    "    df.columns = ['Pacific Time', 'Temp', 'By Hour']\n",
    "all_dfs = pd.concat(all_dfs).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can change it so that you can sort by Pacific Time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'New York Next 5 Days')"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "ax = time_and_temp_df.plot(x=\"date\",y=\"main.temp\",linewidth=1, marker = \"o\", color=\"red\", grid=True, figsize=(10,5))\n",
    "plt.xlabel(\"Date\",size=10)\n",
    "plt.ylabel(\"Temp\",size=10)\n",
    "plt.title(\"New York Next 5 Days\", size=10)\n",
    "#ax.set_xticklabels(df.C, rotation=90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'San Francisco Last 5 Days')"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = all_dfs.plot(x=\"Pacific Time\",y=\"Temp\",linewidth=0, marker = \"o\", color=\"red\", grid=True, figsize=(10,5))\n",
    "plt.xlabel(\"Pacific Time\",size=10)\n",
    "plt.ylabel(\"Temp\",size=10)\n",
    "plt.title(\"San Francisco Last 5 Days\", size=10)\n",
    "#ax.set_xticklabels(df.C, rotation=90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=15, step=1)"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_dfs.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  2,  4,  6,  8, 10, 12, 14])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.arange(0,15,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now adding one dataframe on top of the other\n",
    "https://stackoverflow.com/questions/26133465/how-to-stack-data-frames-on-top-of-one-another-pandas-python3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How would I put this into a data frame?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The weather API responded with: {'coord': {'lon': -0.13, 'lat': 51.51}, 'weather': [{'id': 721, 'main': 'Haze', 'description': 'haze', 'icon': '50n'}, {'id': 500, 'main': 'Rain', 'description': 'light rain', 'icon': '10n'}], 'base': 'stations', 'main': {'temp': 277.48, 'pressure': 1026, 'humidity': 86, 'temp_min': 277.15, 'temp_max': 278.15}, 'visibility': 5000, 'wind': {'speed': 2.1, 'deg': 360}, 'clouds': {'all': 90}, 'dt': 1519240800, 'sys': {'type': 1, 'id': 5093, 'message': 0.0062, 'country': 'GB', 'sunrise': 1519196463, 'sunset': 1519234070}, 'id': 2643743, 'name': 'London', 'cod': 200}.\n"
     ]
    }
   ],
   "source": [
    "# Get weather data\n",
    "weather_response = requests.get(query_url)\n",
    "weather_json = weather_response.json()\n",
    "\n",
    "# Get the temperature from the response\n",
    "print(f\"The weather API responded with: {weather_json}.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
